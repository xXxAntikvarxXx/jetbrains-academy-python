type: edu
custom_name: stage5
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    from hstest.check_result import CheckResult

    from random import shuffle
    from string import ascii_lowercase

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)

    description_list = ['python', 'java', 'kotlin', 'javascript']
    out_of_description = ['clojure', 'haskell', 'typescript', 'assembler']

    catch = {i: 0 for i in description_list}


    class CoffeeMachineTest(StageTest):
        def generate(self) -> List[TestCase]:
            tests = []

            for word in description_list + out_of_description + [ascii_lowercase]:
                for i in range(100):
                    words = [w for w in word * 2]
                    shuffle(words)
                    inputs = '\n'.join(words)
                    tests += [TestCase(stdin=inputs, attach=words)]

            shuffle(tests)

            word = 'l\na\ns\nt\n' * 2
            tests += [TestCase(stdin=word, attach='last')]
            return tests

        # in old tests there was a \n after 'Input a letter:' return it!
        def _fix_reply(self, reply: str):
            pos = 0
            phrases = []
            while True:
                pos1 = reply.find("letter:", pos)
                if pos1 == -1:
                    phrases.append(reply[pos:].strip(' '))
                    break
                pos1 += len("letter:")
                phrases.append(reply[pos:pos1].strip(' '))
                pos = pos1
            return '\n'.join(phrases)

        def check(self, reply: str, attach: Any) -> CheckResult:
            reply = self._fix_reply(reply)
            tries = [i.strip() for i in reply.strip().split('\n\n') if len(i.strip())]

            if len(tries) == 0:
                return CheckResult.wrong(
                    "Seems like you didn't print the game or not separated output properly"
                    "(there need to be an empty line between guessing attempts)"
                )

            if "Input a letter" not in reply:
                return CheckResult.wrong(
                    "Input doesn't contain any \"Input a letter\" lines"
                )

            if 'for playing' not in tries[-1]:
                return CheckResult.wrong(
                    "Last block should contain text \"Thanks for playing!\""
                )

            elif "Input a letter" in tries[-1]:
                return CheckResult.wrong(
                    "Last block should not contain text \"Input a letter\""
                )

            tries = tries[:-1]

            full_blocks = [try_ for try_ in tries if len(try_.splitlines()) > 1]
            blocks = [block.splitlines()[0].strip() for block in full_blocks]

            for full_block, block in zip(full_blocks, blocks):
                if ' ' in block:
                    return CheckResult.wrong(
                        'Cannot parse this block - it contains spaces '
                        'in the first line, but shouldn\'t\n\n'
                        f'{full_block}'
                    )

            if len(blocks) < 8:
                return CheckResult.wrong(
                    f'There are less than 8 blocks of output. '
                    f'Did you separate each guess attempt with a new line?'
                )

            lengths = set(len(i) for i in blocks)

            str_lengths = []
            for i, curr_len in enumerate(lengths, 1):
                for curr_block in blocks:
                    if curr_len == len(curr_block):
                        str_lengths += [f'{i}. {curr_block}']
                        break

            str_lengths = '\n'.join(str_lengths)

            if len(lengths) > 1:
                return CheckResult.wrong(
                    f'Every line with guessed letters should be the same length as others.\n'
                    f'Found lines with guessed letters:\n{str_lengths}'
                )

            correct = '-' * len(blocks[0])

            if blocks[0] != correct:
                return CheckResult.wrong(
                    f'The first guess should only contain dashes: \n'
                    f'{correct}\n'
                    f'Your first guess:\n'
                    f'{blocks[0]}'
                )

            for letter, prev, next in zip(attach, blocks[0:], blocks[1:]):

                cond1 = (
                        (letter not in prev) and
                        (letter in next) and
                        (set(next) - set(prev) != set(letter))
                )

                cond2 = (
                        (letter not in prev) and
                        (letter not in next) and
                        (next != prev)
                )

                cond3 = (
                        (letter in prev) and
                        (letter in next) and
                        (next != prev)
                )

                if cond1 or cond2 or cond3:
                    return CheckResult.wrong(
                        f'This transition is incorrect:\n'
                        f'Before: {prev}\n'
                        f'Letter: {letter}\n'
                        f'After : {next}'
                    )

            if '-' not in blocks[-1]:
                try:
                    catch[blocks[-1]] += 1
                except KeyError:
                    return CheckResult.wrong("Your program is using a word '{0}'. "
                                             "This word is not "
                                             "on the list from the description".format(blocks[-1]))

            if attach == 'last':
                if catch.values() == 0:
                    return CheckResult.wrong(
                        "Looks like your program is not using "
                        "all of the words to guess from the list in description"
                    )

            return CheckResult.correct()


    if __name__ == '__main__':
        CoffeeMachineTest('hangman.hangman').run_tests()
  learner_created: false
- name: hangman/hangman.py
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/69/stages/376/implement
status: Solved
feedback:
  message: Congratulations! Continue on <a href="https://hyperskill.org/projects/69/stages/376/implement">JetBrains
    Academy</a>
  time: Tue, 14 Jul 2020 20:16:25 UTC
record: 5
